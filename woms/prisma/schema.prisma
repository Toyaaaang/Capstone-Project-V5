// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id              String   @id @default(cuid())
  username        String   @unique
  email           String   @unique
  firstName       String
  lastName        String
  password        String   // hashed password
  role            Role     @default(employee)
  department      Department?
  suboffice       Suboffice?
  isRoleConfirmed Boolean  @default(false)
  signature       String?  // URL
  idImageUrl      String?  // URL

  // Prisma handles timestamps automatically if you want
  createdAt       DateTime @default(now())  
  updatedAt       DateTime @updatedAt

  // Relations
  roleRequests    RoleRequestRecord[]
  processedRoles  RoleRequestRecord[] @relation("ProcessedBy")
  accounts        Account[]
  sessions        Session[]
  notifications   Notification[]
  
  @@map("users")
}

model RoleRequestRecord {
  id             String   @id @default(cuid())
  requestedRole  Role
  status         RoleRequestStatus @default(pending)
  processedAt    DateTime @default(now())

  // Relations
  user           User     @relation(fields: [userId], references: [id])
  userId         String

  processedBy    User?    @relation("ProcessedBy", fields: [processedById], references: [id])
  processedById  String?

  @@map("role_request_records")
}

enum Role {
  warehouse_admin
  warehouse_staff
  manager
  employee
  engineering
  operations_maintenance
  budget_analyst
  sub_office
  finance
  audit
}

enum Department {
  engineering
  operations_maintenance
  finance
  admin
}

enum Suboffice {
  sub_office_a
  sub_office_b
  sub_office_c
}

enum RoleRequestStatus {
  approved
  rejected
  pending
}

model Notification {
  id          String   @id @default(cuid())
  userId      String?  
  user        User?    @relation(fields: [userId], references: [id])
  role        Role?   
  title       String
  body        String
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}
