// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id              String   @id @default(cuid())
  username        String   @unique
  email           String   @unique
  firstName       String
  lastName        String
  password        String   // hashed password
  role            Role     @default(employee)
  department      Department?
  suboffice       Suboffice?
  isRoleConfirmed Boolean  @default(false)
  signature       String?  // URL
  idImageUrl      String?  // URL

  // Prisma handles timestamps automatically if you want
  createdAt       DateTime @default(now())  
  updatedAt       DateTime @updatedAt

  // Relations
  roleRequests    RoleRequestRecord[]
  processedRoles  RoleRequestRecord[] @relation("ProcessedBy")
  accounts        Account[]
  sessions        Session[]
  notifications   Notification[]
  auditLogs       AuditLog[]
  
  @@map("users")
  materialRequests MaterialRequest[]
  workOrderAssignedRequests MaterialRequest[] @relation("WorkOrderAssignedBy")
}

model RoleRequestRecord {
  id             String   @id @default(cuid())
  requestedRole  Role
  status         RoleRequestStatus @default(pending)
  processedAt    DateTime @default(now())

  // Relations
  user           User     @relation(fields: [userId], references: [id])
  userId         String

  processedBy    User?    @relation("ProcessedBy", fields: [processedById], references: [id])
  processedById  String?

  @@map("role_request_records")
}

enum Role {
  warehouse_admin
  warehouse_staff
  manager
  employee
  engineering
  operations_maintenance
  budget_analyst
  sub_office
  finance
  audit
}

enum Department {
  engineering
  operations_maintenance
  finance
  admin
}

enum Suboffice {
  sub_office_a
  sub_office_b
  sub_office_c
}

enum RoleRequestStatus {
  approved
  rejected
  pending
}

model Notification {
  id          String   @id @default(cuid())
  userId      String?  
  user        User?    @relation(fields: [userId], references: [id])
  role        Role?   
  title       String
  body        String
  link        String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model AuditLog {
  id          String   @id @default(cuid())
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  action      String   // e.g. 'register', 'approve_role', 'delete_material'
  description String
  createdAt   DateTime @default(now())
}

model Material {
  id          String   @id @default(cuid())
  name        String   @unique
  unit        String
  category    MaterialCategory @default(uncategorized)
  description String?
  visible     Boolean  @default(true)
  inventory   Inventory[]

  MaterialRequestItem MaterialRequestItem[]
}

model Inventory {
  id         String    @id @default(cuid())
  material   Material  @relation(fields: [materialId], references: [id])
  materialId String
  quantity   Int?
  updatedAt  DateTime  @updatedAt

  @@unique([materialId])
}

enum MaterialCategory {
  wiring
  poles
  metering
  transformers
  hardware
  safety
  tools
  office_supply
  uncategorized
}

model MaterialRequest {
  id                   String   @id @default(cuid())
  referenceCode        String   @unique
  requester            User     @relation(fields: [requesterId], references: [id])
  requesterId          String
  department           Department
  purpose              String
  createdAt            DateTime @default(now())
  status               MaterialRequestStatus @default(pending)
  rejectionReason      String?
  workOrderNo          String?
  manpower             String?
  targetCompletion     DateTime?
  actualCompletion     DateTime?
  duration             String?
  location             String?
  latitude             Float?
  longitude            Float?
  requesterDepartment  String?
  workOrderAssignedBy  User?    @relation("WorkOrderAssignedBy", fields: [workOrderAssignedById], references: [id])
  workOrderAssignedById String?
  origin               RequestOrigin @default(employee)
  items                MaterialRequestItem[]

  @@map("material_requests")
}

model MaterialRequestItem {
  id           String          @id @default(cuid())
  request      MaterialRequest @relation(fields: [requestId], references: [id])
  requestId    String
  material     Material?       @relation(fields: [materialId], references: [id])
  materialId   String?
  customName   String?
  customUnit   String?
  quantity     Decimal
  unit         String

  @@map("material_request_items")
}

enum MaterialRequestStatus {
  pending
  won_assigned
  in_progress
  completed
  charged
  ready_for_release
  released
  requisitioned
  partially_fulfilled
  invalid
  rejected
}

enum RequestOrigin {
  employee
  sub_office
}
